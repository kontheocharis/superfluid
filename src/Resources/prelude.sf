-- General types

data Unit : Type {
  tt : Unit
}

data Bool : Type {
  true : Bool,
  false : Bool
}

data Sigma (A : Type, B : A -> Type) : Type {
  pair : (a : A) -> B a -> Sigma A B
}

def dup : [A : Type] -> A -> A * A {
  \a => (a, a)
}

def fst : [A : Type, B : A -> Type] -> Sigma A B -> A {
  \p => case p {
    (a, b) => a
  }
}

def snd : [A : Type, B : A -> Type] -> (p : Sigma A B) -> B (fst p) {
  \[_] [B] p => case p to (\p => B (fst p)) {
    (a, b) => b
  }
}

def id : [A : Type] -> A -> A {
  \a => a
}

def if-then-else : [A : Type] -> Bool -> (Unit -> A) -> (Unit -> A) -> A {
  \[A] b t f => case b {
    true => t tt,
    false => f tt
  }
}

prim conjure : [A : Type] -> A

-- -- JS primitives

prim JS : Type

prim to-js : [A : Type] -> A -> JS

prim js-null : JS

prim js-undefined : JS

prim js-true : JS

prim js-false : JS

prim js-empty-array : JS

prim js-array-extend-l : JS -> JS -> JS

prim js-array-extend-r : JS -> JS -> JS

prim js-slice : JS -> JS -> JS -> JS

prim js-map : (JS -> JS) -> JS -> JS

prim js-fold : (JS -> JS -> JS) -> JS -> JS -> JS

prim js-length : JS -> JS

prim js-index : JS -> JS -> JS

prim js-zero : JS

prim js-one : JS

prim js-plus : JS -> JS -> JS

prim js-minus : JS -> JS -> JS

prim js-times : JS -> JS -> JS

prim js-div : JS -> JS -> JS

prim js-mod : JS -> JS -> JS

prim js-pow : JS -> JS -> JS

prim js-neg : JS -> JS

prim js-eq : JS -> JS -> JS

prim js-eqq : JS -> JS -> JS

prim js-neq : JS -> JS -> JS

prim js-neqq : JS -> JS -> JS

prim js-lt : JS -> JS -> JS

prim js-lte : JS -> JS -> JS

prim js-gt : JS -> JS -> JS

prim js-gte : JS -> JS -> JS

prim js-and : JS -> JS -> JS

prim js-or : JS -> JS -> JS

prim js-not : JS -> JS

prim js-if : [A : Type] -> JS -> A -> A -> A

prim js-typeof : JS -> JS

-- -- IO

prim IO : Type -> Type

-- -- JS IO

prim js-console-log : JS -> IO Unit

prim js-prompt : IO JS

-- -- JS Buffer

prim js-buffer-alloc : JS -> JS

prim js-buffer-byte-length : JS -> JS

-- -- source, sourceStart, sourceEnd, targetStart, target
prim js-buffer-copy : JS -> JS -> JS -> JS -> JS -> JS

-- -- buffer, value, offset
prim js-buffer-write-uint16-be : JS -> JS -> JS -> JS

prim js-buffer-write-uint8 : JS -> JS -> JS -> JS

prim js-buffer-read-uint16-be : JS -> JS -> JS

prim js-buffer-read-uint8 : JS -> JS -> JS

prim js-buffer-subarray : JS -> JS -> JS -> JS

-- -- Shorthands
#unfold
def js-two : JS {
 js-plus js-one js-one
}

#unfold
def js-four : JS {
 js-times js-two js-two
}

#unfold
def js-six : JS {
 js-plus js-four js-two
}

#unfold
def js-eight : JS {
 js-times js-four js-four
}

-- -- General primitives

prim cast : [A : Type] -> [B : Type] -> A -> B

def from-js : [A : Type] -> JS -> A {
  \a => cast a
}

prim io-return : [A : Type] -> A -> IO A

prim io-bind : [A : Type] -> [B : Type] -> IO A -> (A -> IO B) -> IO B

def debug-print : [A : Type] -> A -> IO Unit {
  \a => js-console-log (to-js a)
}

data Maybe (A : Type) : Type {
  nothing : Maybe A,
  just : A -> Maybe A
}

data Either (L : Type) (R : Type) : Type {
  left : L -> Either L R,
  right : R -> Either L R
}

data Equal [A : Type] : A -> A -> Type {
  refl : [x : A] -> Equal x x
}

data Nat : Type {
  z : Nat,
  s : Nat -> Nat
}

data List (A : Type) : Type {
  nil : List A,
  cons : A -> List A -> List A
}

data Fin : Nat -> Type {
  fz : [n : Nat] -> Fin (s n),
  fs : [n : Nat] -> Fin n -> Fin (s n)
}

data Empty : Type {}

def void : [A : Type] -> Empty -> A {
  \m => case m {}
}

data Dec (A : Type) : Type {
  yes : A -> Dec A,
  no : (A -> Empty) -> Dec A
}

def add : Nat -> Nat -> Nat {
  \m n => case m {
    z => n,
    s m' => s (add m' n),
  }
}

def sub : Nat -> Nat -> Nat {
  \m n => case n {
    z => m,
    s n' => case m {
      z => z,
      s m' => sub m' n',
    }
  }
}

def mul : Nat -> Nat -> Nat {
  \m n => case m {
    z => z,
    s m' => add n (mul m' n),
  }
}

def is-even : Nat -> Bool {
  \n => case n {
    z => true,
    s n' => case n' {
      z => false,
      s n'' => is-even n'',
    }
  }
}

def pow : Nat -> Nat -> Nat {
  \m n => case n {
    z => s z,
    s n' => mul m (pow m n'),
  }
}

def and : Bool -> Bool -> Bool {
  \a b => case a {
    true => b,
    false => false,
  }
}

def or : Bool -> Bool -> Bool {
  \a b => case a {
    true => true,
    false => b,
  }
}

def not : Bool -> Bool {
  \a => case a {
    true => false,
    false => true,
  }
}

def fin-to-nat : [n : Nat] -> Fin n -> Nat {
  \f => case f {
    fz => z,
    fs f' => s (fin-to-nat f'),
  }
}

def fin-is-even : [n : Nat] -> Fin n -> Bool {
  \x => case x {
    fz => true,
    fs x => case x {
      fz => false,
      fs y => fin-is-even y
    }
  }
}

def upgrade : [n : Nat] -> (k : Nat) -> Fin n -> Fin (add k n) {
  \[n] k => case k to (\m => Fin n -> Fin (add m n)) {
    z => id,
    s k' => \x => fs (upgrade k' x)
  }
}

def fin-eq : [n : Nat] -> [m : Nat] -> Fin n -> Fin m -> Bool {
  \a b => case a {
    fz => case b {
      fz => true,
      fs y => false
    },
    fs x => case b {
      fz => false,
      fs y => fin-eq x y
    }
  }
}

def length : [A : Type] -> List A -> Nat {
  \xs => case xs {
    nil => z,
    cons _ xs' => s (length xs'),
  }
}

def type : [A : Type] -> A -> Type {
  \[A] _ => A
}

def map : [A : Type] -> [B : Type] -> (A -> B) -> List A -> List B {
  \f xs => case xs {
    nil => nil,
    cons x xs' => cons (f x) (map f xs')
  }
}

def find : [A : Type] -> (A -> Bool) -> List A -> Maybe A {
  \p xs => case xs {
    nil => nothing,
    cons x xs' => case p x {
      true => just x,
      false => find p xs'
    }
  }
}

def fold : [A : Type] -> [B : Type] -> (A -> B -> B) -> B -> List A -> B {
  \f acc xs => case xs {
    nil => acc,
    cons x xs' => f x (fold f acc xs')
  }
}

def index : [A : Type] -> Nat -> List A -> Maybe A {
  \n xs => case xs {
    nil => nothing,
    cons x xs' => case n {
      z => just x,
      s n' => index n' xs'
    }
  }
}

def subst : [A : Type, x : A, y : A] -> (P : A -> Type) -> Equal x y -> P x -> P y {
  \P e => case e to (\x y _ => P x -> P y) {
    refl => id
  }
}

def cong : [A : Type, B : Type, x : A, y : A] -> (f : A -> B) -> Equal x y -> Equal (f x) (f y) {
  \f e => case e to (\x y _ => Equal (f x) (f y)) {
    refl => refl
  }
}

def sym : [A : Type, x : A, y : A] -> Equal x y -> Equal y x {
  \e => case e to (\x y _ => Equal y x) {
    refl => refl
  }
}

def z-neq-s : [n : Nat] -> Equal z (s n) -> Empty {
  \p => subst [Nat] (\n => case n {
    z => Unit,
    s _ => Empty,
  }) p tt
}

def co-sym : [A : Type, x : A, y : A] -> (Equal x y -> Empty) -> (Equal y x -> Empty) {
  \m p => m (sym p)
}

def s-inj : [n : Nat, m : Nat] -> Equal (s n) (s m) -> Equal n m {
  \e => subst [Nat] (\x => Equal n (case x {
    z => n,
    s k => k
  })) e refl
}

def s-co-cong : [x : Nat, y : Nat] -> (Equal x y -> Empty) -> (Equal (s x) (s y) -> Empty) {
  \m p => m (s-inj p)
}

def nat-eq : (n : Nat, m : Nat) -> Dec (Equal n m) {
  \n m => case n to (\n => Dec (Equal n m)) {
    z => case m to (\m => Dec (Equal z m)) {
      z => yes refl,
      s m' => no z-neq-s,
    },
    s n' => case m to (\m => Dec (Equal (s n') m)) {
      z => no (co-sym z-neq-s),
      s m' => case nat-eq n' m' to (\e => Dec (Equal (s n') (s m'))) {
        yes e => yes (cong s e),
        no f => no (s-co-cong f)
      }
    }
  }
}

-- -- Default representations
-- repr data Bool as JS {
--   true as js-true,
--   false as js-false,

--   case b {
--     true => t,
--     false => f,
--   } as {
--     js-if b (cast t) (cast f)
--   }
-- }

-- -- repr def and as \a b => unrepr Bool (js-and (repr a) (repr b))
-- -- repr def or as \a b => unrepr Bool (js-or (repr a) (repr b))
-- -- repr def not as \a => unrepr Bool (js-not (repr a))


-- -- repr data Nat as JS {
-- --   z as js-zero,
-- --   s n as js-plus js-one (repr n),
-- --   case n {
-- --     z => b,
-- --     s => r,
-- --   } as {
-- --     js-if (js-eqq (repr n) js-zero)
-- --       (cast b)
-- --       (cast (r (unrepr Nat (js-minus (repr n) js-one))))
-- --   }
-- -- }

-- -- repr def add as \a b => unrepr Nat (js-plus (repr a) (repr b))
-- -- repr def mul as \a b => unrepr Nat (js-times (repr a) (repr b))
-- -- repr def pow as \a b => unrepr Nat (js-pow (repr a) (repr b))
-- -- repr def is-even as \n => unrepr Bool (js-eqq (js-mod (repr n) js-two) js-zero)

-- -- repr data Fin n as JS {
-- --   fz as js-zero,
-- --   fs n as js-plus js-one (repr n),
-- --   case n {
-- --     fz => b,
-- --     fs => r,
-- --   } as {
-- --     js-if (js-eqq (repr n) js-zero)
-- --       (cast b)
-- --       (cast (r (unrepr Fin (js-minus (repr n) js-one))))
-- --   }
-- -- }

-- -- repr def fin-to-nat as \n => unrepr Nat (repr n)
-- -- repr def fin-is-even as \n => unrepr Bool (js-eqq (js-mod (repr n) js-two) js-zero)
-- -- repr def fin-eq as \x y => unrepr Bool (js-eqq (repr x) (repr y))

-- -- repr data Maybe A as JS { -- Here we really need a bound "A represents as JS"
-- --   nothing as js-null,
-- --   just a as to-js a,

-- --   case m {
-- --     nothing => n,
-- --     just => j,
-- --   } as {
-- --     js-if (js-eqq (repr m) js-null)
-- --       (cast n)
-- --       (cast (j (cast m)))
-- --   }
-- -- }

-- -- repr data List A as JS {
-- --   nil as js-empty-array,
-- --   cons x xs as js-array-extend-l (to-js x) (repr xs),

-- --   case l {
-- --     nil => n,
-- --     cons => c,
-- --   } as {
-- --     let l' = repr l;
-- --     js-if (js-eqq (js-length l') js-zero)
-- --       (cast n)
-- --       (cast (c (cast (js-index l' js-zero)) (unrepr List (js-slice l' js-one (js-length l')))))
-- --   }
-- -- }

-- -- repr def index as {
-- --   \i l => {
-- --     let l' = repr l;
-- --     let i' = repr i;

-- --     unrepr Maybe (
-- --       js-if (js-lt i' (js-length l'))
-- --         (cast (js-index l' i'))
-- --         (cast js-null)
-- --     )
-- --   }
-- -- }

-- -- repr def length as \l => unrepr Nat (js-length (repr l))
-- -- repr def map as \f xs => unrepr List (js-map (cast f) (repr xs))
-- -- repr def fold as \f i xs => cast (js-fold (\acc x => cast (f (cast x) (cast acc))) (to-js i) (repr xs))

-- -- More definitions

data Char : Type {
  char-from-num : Fin 32 -> Char,
}

data String : Type {
  snil : String,
  scons : Char -> String -> String,
}
