-- General types

data Unit : Type {
  tt : Unit
}

data Bool : Type {
  true : Bool,
  false : Bool
}

def id : [A : Type] -> A -> A {
  \a => a
}

def if-then-else : [A : Type] -> Bool -> (Unit -> A) -> (Unit -> A) -> A {
  \[A] b t f => case b {
    true => t tt,
    false => f tt
  }
}

prim impossible : [A : Type] -> A

-- JS primitives

prim JS : Type

prim to-js : [A : Type] -> A -> JS

prim js-null : JS

prim js-undefined : JS

prim js-true : JS

prim js-false : JS

prim js-empty-array : JS

prim js-array-extend-l : JS -> JS -> JS

prim js-array-extend-r : JS -> JS -> JS

prim js-slice : JS -> JS -> JS -> JS

prim js-map : (JS -> JS) -> JS -> JS

prim js-fold : (JS -> JS -> JS) -> JS -> JS -> JS

prim js-length : JS -> JS

prim js-index : JS -> JS -> JS

prim js-zero : JS

prim js-one : JS

prim js-plus : JS -> JS -> JS

prim js-minus : JS -> JS -> JS

prim js-times : JS -> JS -> JS

prim js-div : JS -> JS -> JS

prim js-mod : JS -> JS -> JS

prim js-pow : JS -> JS -> JS

prim js-neg : JS -> JS

prim js-eq : JS -> JS -> JS

prim js-eqq : JS -> JS -> JS

prim js-neq : JS -> JS -> JS

prim js-neqq : JS -> JS -> JS

prim js-lt : JS -> JS -> JS

prim js-lte : JS -> JS -> JS

prim js-gt : JS -> JS -> JS

prim js-gte : JS -> JS -> JS

prim js-and : JS -> JS -> JS

prim js-or : JS -> JS -> JS

prim js-not : JS -> JS

prim js-if : [A : Type] -> JS -> A -> A -> A

prim js-typeof : JS -> JS

-- IO

prim IO : Type -> Type

-- JS IO

prim js-console-log : JS -> IO Unit

prim js-prompt : IO JS

-- JS Buffer

prim js-buffer-alloc : JS -> JS

prim js-buffer-byte-length : JS -> JS

-- source, sourceStart, sourceEnd, targetStart, target
prim js-buffer-copy : JS -> JS -> JS -> JS -> JS -> JS

-- buffer, value, offset
prim js-buffer-write-uint16-be : JS -> JS -> JS -> JS

prim js-buffer-write-uint8 : JS -> JS -> JS -> JS

prim js-buffer-read-uint16-be : JS -> JS -> JS

prim js-buffer-read-uint8 : JS -> JS -> JS

prim js-buffer-subarray : JS -> JS -> JS -> JS

-- Shorthands
#unfold
def js-two : JS {
 js-plus js-one js-one
}

#unfold
def js-four : JS {
 js-times js-two js-two
}

#unfold
def js-six : JS {
 js-plus js-four js-two
}

#unfold
def js-eight : JS {
 js-times js-four js-four
}

-- General primitives

prim cast : [A : Type] -> [B : Type] -> A -> B

prim io-return : [A : Type] -> A -> IO A

prim io-bind : [A : Type] -> [B : Type] -> IO A -> (A -> IO B) -> IO B

def debug-print : [A : Type] -> A -> IO Unit {
  \a => js-console-log (to-js a)
}

data Maybe : Type -> Type {
  nothing : [A : Type] -> Maybe A,
  just : [A : Type] -> A -> Maybe A
}

data Equal : [A : Type] -> A -> A -> Type {
  refl : [A : Type] -> [x : A] -> Equal x x
}

data Nat : Type {
  z : Nat,
  s : Nat -> Nat
}

data List : Type -> Type {
  nil : [A : Type] -> List A,
  cons : [A : Type] -> A -> List A -> List A
}

data Vec : Type -> Nat -> Type {
  vnil : [A : Type] -> Vec A z,
  vcons : [A : Type] -> [n : Nat] -> A -> Vec A n -> Vec A (s n)
}

data Fin : Nat -> Type {
  fz : [n : Nat] -> Fin (s n),
  fs : [n : Nat] -> Fin n -> Fin (s n)
}

def rec add : Nat -> Nat -> Nat {
  \m n => case m {
    z => n,
    s m' => s (add m' n),
  }
}

def rec sub : Nat -> Nat -> Nat {
  \m n => case n {
    z => m,
    s n' => case m {
      z => z,
      s m' => sub m' n',
    }
  }
}

def rec mul : Nat -> Nat -> Nat {
  \m n => case m {
    z => z,
    s m' => add n (mul m' n),
  }
}

def rec pow : Nat -> Nat -> Nat {
  \m n => case n {
    z => s z,
    s n' => mul m (pow m n'),
  }
}

def rec and : Bool -> Bool -> Bool {
  \a b => case a {
    true => b,
    false => false,
  }
}

def rec or : Bool -> Bool -> Bool {
  \a b => case a {
    true => true,
    false => b,
  }
}

def rec not : Bool -> Bool {
  \a => case a {
    true => false,
    false => true,
  }
}

def rec fin-to-nat : [n : Nat] -> Fin n -> Nat {
  \f => case f {
    fz => z,
    fs [n] f' => s (fin-to-nat [n] f'),
  }
}

def rec map : [A : Type] -> [B : Type] -> (A -> B) -> List A -> List B {
  \[A] [B] f xs => case xs {
    nil => nil,
    cons x xs' => cons (f x) (map f xs')
  }
}

def rec find : [A : Type] -> (A -> Bool) -> List A -> Maybe A {
  \[A] p xs => case xs {
    nil => nothing,
    cons x xs' => case p x {
      true => just x,
      false => find p xs'
    }
  }
}

def rec fold : [A : Type] -> [B : Type] -> (A -> B -> B) -> B -> List A -> B {
  \[A] [B] f acc xs => case xs {
    nil => acc,
    cons x xs' => f x (fold f acc xs')
  }
}

def rec index : [A : Type] -> Nat -> List A -> Maybe A {
  \[A] n xs => case xs {
    nil => nothing,
    cons x xs' => case n {
      z => just x,
      s n' => index n' xs'
    }
  }
}

-- Default representations

repr BoolAsBoolean {
  data Bool as JS {
    true as js-true,
    false as js-false,

    case b {
      true => t,
      false => f,
    } as {
      js-if b (cast t) (cast f)
    }
  }

  def and as js-and
  def or as js-or
  def not as js-not
}

repr NatAsNumber {
  data Nat as JS {
    z as js-zero,
    s n as js-plus js-one n,
    case n {
      z => b,
      s => r,
    } as {
      js-if (js-eqq n js-zero)
        (cast b)
        (cast (r (js-minus n js-one)))
    }
  }

  def add as js-plus
  def mul as js-times
  def pow as js-pow
}

repr FinAsNumber {
  data Fin n as JS {
    fz as js-zero,
    fs n as js-plus js-one (to-js n),
    case n {
      fz => b,
      fs => r,
    } as {
      js-if (js-eqq n js-zero)
        (cast b)
        (cast (r (js-minus n js-one)))
    }
  }

  def fin-to-nat as id
}

repr MaybeAsNullable {
  data Maybe A as JS {
    nothing as js-null,
    just a as to-js a,

    case m {
      nothing => n,
      just => j,
    } as {
      js-if (js-eqq m js-null)
        (cast n)
        (cast (j (cast m)))
    }
  }
}

repr ListAsArray {
  data List A as JS {
    nil as js-empty-array,
    cons x xs as js-array-extend-l (to-js x) (to-js xs),

    case l {
      nil => n,
      cons => c,
    } as {
      js-if (js-eqq (js-length l) js-zero)
        (cast n)
        (cast (c (js-index l js-zero) (js-slice l js-one (js-length l))))
    }
  }

  def index as {
    \i l => {
      js-if (js-lt i (js-length l))
        (cast (js-index l i))
        (cast js-null)
    }
  }

  def map as \f xs => js-map (cast f) (to-js xs)
  def fold as \f i xs => cast (js-fold (cast f) (to-js i) (to-js xs))
}

-- More definitions

def Char : Type {
  Fin (pow (s (s z)) (pow (s (s z)) (s (s (s z)))))
}

def String : Type {
  List Char
}
