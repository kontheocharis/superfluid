-- Basic types
data Unit : Type {
  tt : Unit
}

data Bool : Type {
  true : Bool,
  false : Bool
}

data Maybe : Type -> Type {
  nothing : [A : Type] -> Maybe A,
  just : [A : Type] -> A -> Maybe A
}

data Equal : [A : Type] -> A -> A -> Type {
  refl : [A : Type] -> [x : A] -> Equal x x
}

data Nat : Type {
  z : Nat,
  s : Nat -> Nat
}

data List : Type -> Type {
  nil : [A : Type] -> List A,
  cons : [A : Type] -> A -> List A -> List A
}

data Vec : Type -> Nat -> Type {
  vnil : [A : Type] -> Vec A z,
  vcons : [A : Type] -> [n : Nat] -> A -> Vec A n -> Vec A (s n)
}

data Fin : Nat -> Type {
  fz : [n : Nat] -> Fin (s n),
  fs : [n : Nat] -> Fin n -> Fin (s n)
}
