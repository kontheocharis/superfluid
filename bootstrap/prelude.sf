-- General types

data Unit : Type {
  tt : Unit
}

data Bool : Type {
  true : Bool,
  false : Bool
}

data Sigma (A : Type, B : A -> Type) : Type {
  pair : (a : A) -> B a -> Sigma A B
}

data Equal [A : Type] : A -> A -> Type {
  refl : [x : A] -> Equal x x
}

def dup : [A : Type] -> A -> A * A {
  \a => (a, a)
}

def fst : [A : Type, B : A -> Type] -> Sigma A B -> A {
  \p => case p {
    (a, b) => a
  }
}

def snd : [A : Type, B : A -> Type] -> (p : Sigma A B) -> B (fst p) {
  \[_] [B] p => case p to (\p => B (fst p)) {
    (a, b) => b
  }
}

#unfold
def id : [A : Type] -> A -> A {
  \a => a
}

def if-then-else : [A : Type] -> Bool -> (Unit -> A) -> (Unit -> A) -> A {
  \[A] b t f => case b {
    true => t tt,
    false => f tt
  }
}

prim trust-me : [A : Type, x : A, y : A] -> Equal x y

prim conjure : [A : Type] -> A

-- -- JS primitives

-- prim JS : Type

-- prim to-js : [A : Type] -> A -> JS

prim JsUnion : Type -> Type -> Type

prim JsNull : Type

prim JsUndefined : Type

prim JsBool : Type

prim JsArray : Type -> Type

prim JsBigInt : Type

prim JsBigUint : Type

-- Extra conditions : make sure this index is computationally irrelevant

prim JsBoundedUint : JsBigUint -> Type

prim JsNumber : Type

prim JsString : Type

prim js-null : JsNull

prim js-undefined : JsUndefined

prim js-true : JsBool

prim js-false : JsBool

prim js-if : [A : Type] -> JsBool -> (() -> A) -> (() -> A) -> A

prim js-if-dep : [A : JsBool -> Type] -> (b : JsBool) -> (() -> A js-true) -> (() -> A js-false) -> A b

prim js-empty-array : [T : Type] -> JsArray T

prim js-array-extend-l : [T : Type] -> T -> JsArray T -> JsArray T

prim js-array-extend-r : [T : Type] -> JsArray T -> T -> JsArray T

prim js-array-switch-l : [T : Type] -> [E : JsArray T -> Type]
  -> (Unit -> E js-empty-array)
  -> ((x : T) -> (xs : JsArray T) -> E (js-array-extend-l x xs))
  -> (l : JsArray T)
  -> E l

prim js-array-switch-r : [T : Type] -> [E : JsArray T -> Type]
  -> (Unit -> E js-empty-array)
  -> ((xs : JsArray T) -> (x : T) -> E (js-array-extend-r xs x))
  -> (l : JsArray T)
  -> E l

prim js-slice : [T : Type] -> JsArray T -> JsNumber -> JsNumber -> JsArray T

prim js-map : [A B : Type] -> (A * JsNumber -> B) -> JsArray A -> JsArray B

prim js-reduce : [T C : Type] -> (C -> T -> T) -> T -> JsArray T -> C

prim js-length : [T : Type] -> JsArray T -> JsNumber

prim js-index : [T : Type] -> JsArray T -> JsNumber -> JsUnion T JsUndefined

prim js-zero : JsNumber

prim js-one : JsNumber

prim js-big-uint-zero : JsBigUint

prim js-big-uint-one : JsBigUint

prim js-plus : JsNumber -> JsNumber -> JsNumber

prim js-big-uint-plus : JsBigUint -> JsBigUint -> JsBigUint

prim js-bounded-uint-as-big : [n : JsBigUint] -> JsBoundedUint n -> JsBigUint

prim js-zero-or-pos : [A : JsBigUint -> Type]
  -> (() -> A js-big-uint-zero)
  -> ((n : JsBigUint) -> A (js-big-uint-plus js-big-uint-one n))
  -> (i : JsBigUint)
  -> A i

prim js-bounded-uint-zero : [n : JsBigUint] -> JsBoundedUint (js-big-uint-plus js-big-uint-one n)

prim js-bounded-uint-inc : [n : JsBigUint] -> JsBoundedUint n -> JsBoundedUint (js-big-uint-plus js-big-uint-one n)

prim js-bounded-zero-or-pos : [A : (n : JsBigUint) -> JsBoundedUint n -> Type]
  -> ([n : JsBigUint] -> A (js-big-uint-plus js-big-uint-one n) (js-bounded-uint-zero [n]))
  -> ([n : JsBigUint] -> (n' : JsBoundedUint n) -> A (js-big-uint-plus js-big-uint-one n) (js-bounded-uint-inc n'))
  -> [n : JsBigUint]
  -> (i : JsBoundedUint n)
  -> A n i

prim js-minus : JsNumber -> JsNumber -> JsNumber

prim js-times : JsNumber -> JsNumber -> JsNumber

prim js-big-uint-times : JsBigUint -> JsBigUint -> JsBigUint

prim js-div : JsNumber -> JsNumber -> JsNumber

prim js-mod : JsNumber -> JsNumber -> JsNumber

prim js-big-uint-mod : JsBigUint -> JsBigUint -> JsBigUint

prim js-pow : JsNumber -> JsNumber -> JsNumber

prim js-big-uint-pow : JsBigUint -> JsBigUint -> JsBigUint

prim js-neg : JsNumber -> JsNumber

prim js-eq : [A B : Type] -> A -> B -> JsBool

prim js-eqq : [A B : Type] -> A -> B -> JsBool

prim js-neq : [A B : Type] -> A -> B -> JsBool

prim js-neqq : [A B : Type] -> A -> B -> JsBool

prim js-lt : JsNumber -> JsNumber -> JsBool

prim js-lte : JsNumber -> JsNumber -> JsBool

prim js-gt : JsNumber -> JsNumber -> JsBool

prim js-gte : JsNumber -> JsNumber -> JsBool

prim js-and : JsBool -> JsBool -> JsBool

prim js-or : JsBool -> JsBool -> JsBool

prim js-not : JsBool -> JsBool

prim js-panic : [T : Type] -> JsString -> T

-- -- IO

prim IO : Type -> Type

prim io-return : [A : Type] -> A -> IO A

prim io-bind : [A : Type] -> [B : Type] -> IO A -> (A -> IO B) -> IO B

prim unsafe-io : [A : Type] -> IO A -> A

-- -- JS IO

prim js-console-log : [T : Type] -> T -> IO ()

prim js-prompt : IO JsString

-- -- JS Buffer

prim JsBuffer : Type

prim JsBufferMod : Type -> Type

prim js-buffer-bind : [A B : Type] -> JsBufferMod A -> (A -> JsBufferMod B) -> JsBufferMod B

prim js-buffer-return : [A : Type] -> A -> JsBufferMod A

prim js-buffer-get : JsBufferMod JsBuffer

prim js-buffer-set : JsBuffer -> JsBufferMod ()

prim js-buffer-run : [A : Type] -> JsBufferMod A -> JsBuffer * A

prim js-buffer-alloc : (byte-length : JsNumber) -> JsBuffer

prim js-buffer-byte-length : JsBuffer -> JsNumber

prim js-buffer-copy : (source : JsBuffer, source-start : JsNumber, source-end : JsNumber, start : JsNumber) -> JsBufferMod ()

prim js-buffer-write-uint16-be : (value : JsNumber, offset : JsNumber) -> JsBufferMod ()

prim js-buffer-write-uint8 : (value : JsNumber, offset : JsNumber) -> JsBufferMod ()

prim js-buffer-read-uint16-be : (buffer : JsBuffer, offset : JsNumber) -> JsNumber

prim js-buffer-read-uint8 : (buffer : JsBuffer, offset : JsNumber) -> JsNumber

prim js-buffer-subarray : (buffer : JsBuffer, start : JsNumber, end : JsNumber) -> JsBuffer

-- -- General primitives

prim cast : [A : Type] -> [B : Type] -> A -> B

-- def from-js : [A : Type] -> JS -> A {
--   \a => cast a
-- }

def debug-print : [A B : Type] -> A -> B -> B {
  \a b => unsafe-io (io-bind (js-console-log a) (\_ => io-return b))
}

data Maybe (A : Type) : Type {
  nothing : Maybe A,
  just : A -> Maybe A
}

data Either (L : Type) (R : Type) : Type {
  left : L -> Either L R,
  right : R -> Either L R
}

data Nat : Type {
  z : Nat,
  s : Nat -> Nat
}

data List (A : Type) : Type {
  nil : List A,
  cons : A -> List A -> List A
}

data Fin : Nat -> Type {
  fz : [n : Nat] -> Fin (s n),
  fs : [n : Nat] -> Fin n -> Fin (s n)
}

data Empty : Type {}

def void : [A : Type] -> Empty -> A {
  \m => case m {}
}

data Dec (A : Type) : Type {
  yes : A -> Dec A,
  no : (A -> Empty) -> Dec A
}

def add : Nat -> Nat -> Nat {
  \m n => case m {
    z => n,
    s m' => s (add m' n),
  }
}

def sub : Nat -> Nat -> Nat {
  \m n => case n {
    z => m,
    s n' => case m {
      z => z,
      s m' => sub m' n',
    }
  }
}

def mul : Nat -> Nat -> Nat {
  \m n => case m {
    z => z,
    s m' => add n (mul m' n),
  }
}

def is-even : Nat -> Bool {
  \n => case n {
    z => true,
    s n' => case n' {
      z => false,
      s n'' => is-even n'',
    }
  }
}

def pow : Nat -> Nat -> Nat {
  \m n => case n {
    z => s z,
    s n' => mul m (pow m n'),
  }
}

def and : Bool -> Bool -> Bool {
  \a b => case a {
    true => b,
    false => false,
  }
}

def or : Bool -> Bool -> Bool {
  \a b => case a {
    true => true,
    false => b,
  }
}

def not : Bool -> Bool {
  \a => case a {
    true => false,
    false => true,
  }
}

def mod : Nat -> (n : Nat) -> Fin n {
  ?mod
}

def fin-to-nat : [n : Nat] -> Fin n -> Nat {
  \f => case f {
    fz => z,
    fs f' => s (fin-to-nat f'),
  }
}

def fin-is-even : [n : Nat] -> Fin n -> Bool {
  \x => case x {
    fz => true,
    fs x => case x {
      fz => false,
      fs y => fin-is-even y
    }
  }
}

def upgrade : [n : Nat] -> (k : Nat) -> Fin n -> Fin (add k n) {
  \[n] k => case k to (\m => Fin n -> Fin (add m n)) {
    z => id,
    s k' => \x => fs (upgrade k' x)
  }
}

def fin-eq : [n : Nat] -> [m : Nat] -> Fin n -> Fin m -> Bool {
  \a b => case a {
    fz => case b {
      fz => true,
      fs y => false
    },
    fs x => case b {
      fz => false,
      fs y => fin-eq x y
    }
  }
}

def length : [A : Type] -> List A -> Nat {
  \xs => case xs {
    nil => z,
    cons _ xs' => s (length xs'),
  }
}

def type : [A : Type] -> A -> Type {
  \[A] _ => A
}

def map : [A : Type] -> [B : Type] -> (A -> B) -> List A -> List B {
  \f xs => case xs {
    nil => nil,
    cons x xs' => cons (f x) (map f xs')
  }
}

def find : [A : Type] -> (A -> Bool) -> List A -> Maybe A {
  \p xs => case xs {
    nil => nothing,
    cons x xs' => case p x {
      true => just x,
      false => find p xs'
    }
  }
}

def fold : [A : Type] -> [B : Type] -> (A -> B -> B) -> B -> List A -> B {
  \f acc xs => case xs {
    nil => acc,
    cons x xs' => f x (fold f acc xs')
  }
}

def index : [A : Type] -> Nat -> List A -> Maybe A {
  \n xs => case xs {
    nil => nothing,
    cons x xs' => case n {
      z => just x,
      s n' => index n' xs'
    }
  }
}

def subst : [A : Type, x : A, y : A] -> (P : A -> Type) -> Equal x y -> P x -> P y {
  \P e => case e to (\x y _ => P x -> P y) {
    refl => id
  }
}

def cong : [A : Type, B : Type, x : A, y : A] -> (f : A -> B) -> Equal x y -> Equal (f x) (f y) {
  \f e => case e to (\x y _ => Equal (f x) (f y)) {
    refl => refl
  }
}

def sym : [A : Type, x : A, y : A] -> Equal x y -> Equal y x {
  \e => case e to (\x y _ => Equal y x) {
    refl => refl
  }
}

def z-neq-s : [n : Nat] -> Equal z (s n) -> Empty {
  \p => subst [Nat] (\n => case n {
    z => Unit,
    s _ => Empty,
  }) p tt
}

def co-sym : [A : Type, x : A, y : A] -> (Equal x y -> Empty) -> (Equal y x -> Empty) {
  \m p => m (sym p)
}

def s-inj : [n : Nat, m : Nat] -> Equal (s n) (s m) -> Equal n m {
  \e => subst [Nat] (\x => Equal n (case x {
    z => n,
    s k => k
  })) e refl
}

def s-co-cong : [x : Nat, y : Nat] -> (Equal x y -> Empty) -> (Equal (s x) (s y) -> Empty) {
  \m p => m (s-inj p)
}

def nat-eq-dep : (n : Nat, m : Nat) -> Dec (Equal n m) {
  \n m => case n to (\n => Dec (Equal n m)) {
    z => case m to (\m => Dec (Equal z m)) {
      z => yes refl,
      s m' => no z-neq-s,
    },
    s n' => case m to (\m => Dec (Equal (s n') m)) {
      z => no (co-sym z-neq-s),
      s m' => case nat-eq-dep n' m' to (\e => Dec (Equal (s n') (s m'))) {
        yes e => yes (cong s e),
        no f => no (s-co-cong f)
      }
    }
  }
}

def dec-to-bool : [A : Type] -> Dec A -> Bool {
  \case {
    yes _ => true,
    no _ => false
  }
}

def nat-eq : (n : Nat, m : Nat) -> Bool {
  \n m => dec-to-bool (nat-eq-dep n m)
}

def bool-eq : (a : Bool, b : Bool) -> Bool {
  \a b => case a {
    true => case b {
      true => true,
      false => false,
    },
    false => case b {
      true => false,
      false => true,
    }
  }
}

-- -- Default representations
repr data Bool as JsBool {
  true as js-true,
  false as js-false,

  case b to E {
    true => t,
    false => f,
  } as {
    js-if-dep [repr E] (repr b) (\_ => repr t) (\_ => repr f)
  }
}

repr def and as \a b => unrepr (js-and (repr a) (repr b))
repr def or as \a b => unrepr (js-or (repr a) (repr b))
repr def not as \a => unrepr (js-not (repr a))

repr data Nat as JsBigUint {
  z as js-big-uint-zero,
  s n as js-big-uint-plus js-big-uint-one (repr n),
  case n to E {
    z => b,
    s => r,
  } as {
    js-zero-or-pos [repr E] (\_ => repr b) (repr r) (repr n)
  }
}

repr def add as \a b => unrepr (js-big-uint-plus (repr a) (repr b))
repr def mul as \a b => unrepr (js-big-uint-times (repr a) (repr b))
repr def pow as \a b => unrepr (js-big-uint-pow (repr a) (repr b))
repr def is-even as \n => unrepr (js-eqq (js-big-uint-mod (repr n) (repr 1)) js-big-uint-zero)
repr def nat-eq as \a b => unrepr (js-eqq (repr a) (repr b))

repr data Fin i as JsBoundedUint (repr i) {
  fz as js-bounded-uint-zero,
  fs n as js-bounded-uint-inc (repr n),
  case n to E {
    fz => b,
    fs => r,
  } as {
    js-bounded-zero-or-pos [repr E] (repr b) (repr r) (repr n)
  }
}

repr def fin-to-nat as \n => {
  unrepr (js-bounded-uint-as-big (repr n))
}

repr def fin-is-even as \n => {
  unrepr (js-eqq (js-big-uint-mod (js-bounded-uint-as-big (repr n)) (repr 2)) js-big-uint-zero)
}

repr def fin-eq as \x y => unrepr (js-eqq (repr x) (repr y))

repr data List A as JsArray A {
  nil as js-empty-array,
  cons x xs as js-array-extend-l x (repr xs),

  case l to E {
    nil => n,
    cons => c,
  } as {
    js-array-switch-l [A] [repr E] (\_ => repr n) (repr c) (repr l)
  }
}

-- repr def index as {
--   \i l => {
--     js-if (js-lt i (js-length l))
--       (cast (js-index l i))
--       (cast js-null)
--   }
-- }

-- repr def length as \l => js-length l
-- repr def map as \f xs => js-map (cast f) xs
-- repr def fold as \f i xs => cast (js-reduce (\acc x => cast (f (cast x) (cast acc))) (to-js i) xs)


-- -- data ByteVec : Nat -> Type {
-- --   bnil : ByteVec z,
-- --   bcons : [n : Nat] -> Byte -> ByteVec n -> ByteVec (s n)
-- -- }

-- -- repr data ByteVec n as JS {
-- --   bnil as js-buffer-alloc (repr 0),
-- --   bcons x xs as {
-- --     let old-len = js-buffer-byte-length xs;
-- --     let new-len = js-plus old-len (repr 1);
-- --     let b = js-buffer-alloc new-len;
-- --     let b' = js-buffer-write-uint8 x (repr 0) b;
-- --     js-buffer-copy xs (repr 0) old-len (repr 1) b'
-- --   },
-- --   case l {
-- --     bnil => n,
-- --     bcons => c
-- --   } as {
-- --     let n' = n;
-- --     let c' = c (js-index l (repr 0)) (js-buffer-subarray l (repr 1) (js-buffer-byte-length l));
-- --     let _ = ?h1;

-- --     js-if (js-eqq (js-buffer-byte-length l) (repr 0))
-- --       (cast n')
-- --       (cast c')
-- --   }
-- -- }

-- -- repr data Dec A as JS {
-- --   yes _ as js-true,
-- --   no _ as js-false,
-- --   case d {
-- --     yes => y,
-- --     no => n,
-- --   } as {
-- --     js-if d
-- --       (cast y (cast (refl [x])))
-- --       (cast (n (conjure A)))
-- --   }
-- -- }

-- -- -- More definitions

data Char : Type {
  char-from-num : Fin 32 -> Char,
}

data String : Type {
  snil : String,
  scons : Char -> String -> String,
}

def Word : Type {
  Fin 65536
}

def Byte : Type {
  Fin 256
}

def word-to-nat : Word -> Nat {
  fin-to-nat
}

def Holds : Bool -> Type {
  \b => Equal b true
}


-- REPR helpers

def Reprs : Nat -> Type -> Type {
  \l T => case l {
    z => T,
    s l' => repr (Reprs l' T)
  }
}

def reprs : [T : Type] -> (l : Nat) -> T -> Reprs l T {
  \l t => case l to (\l => Reprs l T) {
    z => t,
    s l' => repr (reprs l' t)
  }
}

def unreprs : [T : Type] -> (l : Nat) -> Reprs l T -> T {
  \l => case l to (\l => Reprs l T -> T) {
    z => id,
    s l' => \r => unreprs l' (unrepr r)
  }
}

def subst-type : [A B : Type] -> Equal A B -> A -> B {
  subst [Type] (\X => X)
}

def repr-subst : [A B : Type] -> Equal (repr A) B -> repr A -> B {
  subst-type
}

def repr-subst' : [A B : Type] -> Equal (repr A) B -> B -> repr A {
  \p => subst-type (sym p)
}

def ReprBy : Type -> Type -> Type {
  \T U => (l : Nat) * Equal (Reprs l T) U
}

def reprs-subst : [A B : Type] -> ReprBy A B -> A -> B {
  \r a => case r {
    (l, p) => subst-type p (reprs l a)
  }
}

def reprs-subst' : [A B : Type] -> ReprBy A B -> B -> A {
  \r b => case r {
    (l, p) => unreprs l (subst-type (sym p) b)
  }
}
