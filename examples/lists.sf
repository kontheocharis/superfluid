

data List' : Type -> Type {
  nil' : [A : Type] -> List' A,
  cons' : [A : Type] -> A -> List' A -> List' A
}

data PsList : Type -> Type {
  psnil : [A : Type] -> PsList A,
  pscons : [A : Type] -> A -> PsList A -> PsList A,
  psdyn : [A : Type] -> JS -> PsList A
}

data Prod : Type -> Type -> Type {
  mk-prod : [A : Type] -> [B : Type] -> A -> B -> Prod A B
}

def rec gather-static : [A : Type] -> PsList A -> Prod (List A) (Maybe JS) {
  \l => case l {
    psnil => mk-prod nil nothing,
    pscons x xs => case gather-static xs {
      mk-prod l j => mk-prod (cons x l) j
    },
    psdyn j => mk-prod nil (just j)
  }
}

def gathered-static-to-js : [A : Type] -> Prod (List A) (Maybe JS) -> JS {
  \p => case p {
    mk-prod l j => case j {
      nothing => {
        fold (\x acc => js-array-extend-l (to-js x) acc) js-empty-array l
      },
      just j' => {
        fold (\x acc => js-array-extend-l (to-js x) acc) j' l
      }
    }
  }
}

def ps-list-to-js : [A : Type] -> PsList A -> JS {
  \l => gathered-static-to-js (gather-static l)
}

repr PsListAsJS {
  data PsList A as JS {
    psnil as ps-list-to-js psnil,
    pscons x xs as ps-list-to-js (pscons x xs),
    psdyn j as j,
    case l {
      psnil => b,
      pscons => r,
      psdyn => j
    } as {
      let m = unrepr List (repr l);
      case m {
        nil => cast b,
        cons [A] x xs => {
          let inner : PsList A = unrepr PsList (repr xs);
          cast (r x inner)
        }
      }
    }
  }
}

repr ListAsPsList {
  data List' A as PsList A {
    nil' as psnil,
    cons' x xs as pscons x (repr xs),
    case l {
      nil' => b,
      cons' => r
    } as {
      case (repr l) {
        psnil => cast b,
        pscons x xs => cast (r x (unrepr List' xs)),
        psdyn [A] j => case (unrepr List j) {
          nil => cast b,
          cons x xs => {
            let l' : PsList A = unrepr PsList (repr xs);
            cast (r x (unrepr List' l'))
          }
        }
      }
    }
  }
}

def main : IO Unit {
  let x : List' Nat = cons' 3 (cons' 4 nil');
  debug-print (ps-list-to-js (repr x))
}
