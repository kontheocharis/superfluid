def nat-fold-range : [A : Type] -> (Nat * Nat) -> A -> (Nat -> A -> A) -> A {
  \(start, end) init f => {
    if lt start end {
      nat-fold-range (s start, end) (f start init) f
    } else {
      init
    }
  }
}

def sum-of-divisors : Nat -> Nat {
  \n => nat-fold-range (1, s (div n 2)) 0 (\i acc => {
    if nat-eq (mod n i) 0 {
      add acc i
    } else {
      acc
    }
  })
}

data AmicablePair : Nat -> Nat -> Type {
  amicable : (a : Nat, b : Nat) ->
    Equal (sum-of-divisors a) b ->
    Equal (sum-of-divisors b) a ->
    AmicablePair a b
}

-- Decision procedure for AmicablePair
def is-amicable-pair : (a : Nat, b : Nat) -> Maybe (AmicablePair a b) {
  \a b => {
    let sum-a = sum-of-divisors a;
    let sum-b = sum-of-divisors b;
    case nat-eq-dep sum-a b {
      yes p1 => case nat-eq-dep sum-b a {
        yes p2 => just (amicable a b p1 p2),
        no _ => nothing
      },
      no _ => nothing
    }
  }
}

-- This runs at run-time with the optimised nat representation based on JS integers.
def main : IO () {
  case is-amicable-pair 284 220 {
    nothing => io-return (debug-print "Not amicable!" tt),
    just _ => io-return (debug-print "Amicable!" tt)
  }
}

-- This runs at compile-time with the standard (linked) nat representation
-- def test : AmicablePair 220 284 {
--   amicable _ _ refl refl
-- }
