data Ty : Type {
  fn : Ty -> Ty -> Ty,
  one : Ty,
}

data Ctx : Type {
  empty-ctx : Ctx,
  cons-ctx : Ctx -> Ty -> Ctx,
}

data Var : Ctx -> Ty -> Type {
  here : [g : Ctx, a : Ty] -> Var (cons-ctx g a) a,
  there : [g : Ctx, a b : Ty] -> Var g a -> Var (cons-ctx g b) a,
}

data Tm : Ctx -> Ty -> Type {
  var : [g : Ctx, a : Ty] -> Var g a -> Tm g a,
  lam : [g : Ctx, a b : Ty] -> Tm (cons-ctx g a) b -> Tm g (fn a b),
  app : [g : Ctx, a b : Ty] -> Tm g (fn a b) -> Tm g a -> Tm g b,
  unit : [g : Ctx] -> Tm g one,
}

data Env' (0 Val' : Ty -> Type) : Ctx -> Type {
  empty-env : Env' Val' empty-ctx,
  cons-env : [g : Ctx, a : Ty] -> Env' Val' g -> Val' a -> Env' Val' (cons-ctx g a),
}

data Val : Ty -> Type {
  vone : Val one,
  vlam : [g : Ctx, a : Ty, b : Ty] -> Env' Val g -> Tm (cons-ctx g a) b -> Val (fn a b),
}

def Env : Ctx -> Type {
  Env' Val
}

def no-var-in-empty : [A : Type, a : Ty] -> Var empty-ctx a -> A {
  ?no-var-in-empty
}

def access : [g : Ctx, a : Ty] -> Env g -> Var g a -> Val a {
  \[g] [a] e => case e to (\g _ => Var g a -> Val a) {
    empty-env => no-var-in-empty,
    cons-env e' t => ?cons-env,
  }
}

def eval : [g : Ctx, a : Ty] -> Env g -> Tm g a -> Val a {
  \[a] e t => (case t to (\g a _ => Env g -> Val a) {
    var v => \e => access e v,
    lam t => \e => vlam e t,
    app u v => \e => {
      let v' = eval e v;
      let u' = eval e u;
      case u' {
        vone => ?vone,
        vlam e t => eval (cons-env e u') t,
      }
    },
    unit => \e => vone,
  }) e
}
