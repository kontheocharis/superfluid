data Vec (T : Type) : Nat -> Type {
  vec-nil : Vec T z,
  vec-cons : [n : Nat] -> T -> Vec T n -> Vec T (s n)
}

def vec-length : [T : Type, n : Nat] -> Vec T n -> Nat {
  \[_] [n] _ => n
}

repr data Vec T n as (l : List T) * Equal (length l) n {
  vec-nil as (nil, refl),
  vec-cons x xs as {
    let (xs', p) = repr xs;
    (cons x xs', cong s p)
  },

  case b to E {
    vec-nil => ni,
    vec-cons => co
  } as {
    let b' = repr b;
    let n = vec-length b;
    let E' = \n => repr (E n);
    let len-eq : Equal (length (fst b')) n = trust-me;

    case (repr b) to (\pr => E' n pr) {
      (l, p) => (case l to (\l => (p : Equal (length l) n) -> E' n (l, p)) {
        nil => \p => {
          let p1 : Equal (vec-length b) z = trust-me;
          subst [Nat] (\n => (repr E) (repr n) _) p1 ni
        },
        cons x xs => \p => ?co
      }) p
    }
  }
}

def vec-to-list : [T : Type, n : Nat] -> Vec T n -> List T {
  \case {
    vec-nil => nil,
    vec-cons x xs => cons x (vec-to-list xs),
  }
}

repr def vec-to-list as \v => fst (repr v)

-- (repr E) (repr (vec-length [T] [x1928] b)) ((pair@[List T, \x2084 => Equal [Nat] (length [T] x2084) (vec-length [T] [x1928] b)]) (nil@[T]) p)
-- (repr E) js-uint-zero ((pair@[List T, \x1850 => Equal [Nat] (length [T] x1850) z]) (nil@[T]) ((refl@[Nat]) [length [T] (nil@[T])]))

-- ((pair@[List T, \x2124 => Equal [Nat] (length [T] x2124) (length [T] (nil@[T]))]) (nil@[T]) p)
-- ((pair@[List T, \x1850 => Equal [Nat] (length [T] x1850) z]) (nil@[T]) ((refl@[Nat]) [length [T] (nil@[T])]))
