-- Define vectors as the nat-indexed version of lists
data Vec (T : Type) : Nat -> Type {
  vec-nil : Vec T z,
  vec-cons : [n : Nat] -> T -> Vec T n -> Vec T (s n)
}

def vec-length : [T : Type, ! n : Nat] -> Vec T n -> Nat {
  \[_] [n] _ => n
}

-- Now we actually want to represent vectors as a refinement of lists
def 0 Vec' : Type -> Nat -> Type {
  \T n => Subset (List T) (\l => Equal (length l) n)
}

-- Implement nil for the refinement
#unfold
def vec-nil' : [T : Type] -> Vec' T 0 {
  element nil refl
}

-- Implement cons for the refinement
#unfold
def vec-cons' : [T : Type, n : Nat] -> T -> Vec' T n -> Vec' T (s n) {
  \[T] [n] x xs => {
    element (cons x (inclusion xs)) (cong s (membership xs))
  }
}

-- Implement induction for the refinement
--
-- Notice all the manual proofs; even though some would go away in the presence
-- of dependent pattern matching, they would still not be structural like
-- pattern matching on the actual Vec. Our program transformation step handles
-- this; we can use the manual and messy induction principle for the refinement
-- to justify structural pattern matching.
#unfold
def vec-ind' : [T : Type] -> (E : (0 n : Nat) -> Vec' T n -> Type)
    -> E 0 vec-nil'
    -> ((x : T) -> [n : Nat] -> (xs : Vec' T n) -> E (s n) (vec-cons' x xs))
    -> [! n : Nat] -> (b : Vec' T n) -> E n b
{
  \E ni co [n] b' => {
    let l = inclusion b';
    let 0 p = membership b';

    subst
      (\t => E n t) (sym subset-eta)
      ((case l to (\l => (p : Equal (length l) n) -> E n (element l p)) {
        nil => case n to (\n' => (p : Equal z n') -> E n' (element nil p)) {
          z => \p => subst (\p' => E z (element nil p')) (sym (uip p)) ni,
          s n' => \p => case z-neq-s p {},
        },
        cons x xs => case n to (\n' => (p : Equal (s (length xs)) n') -> E n' (element (cons x xs) p)) {
          z => \p => case z-neq-s (sym p) {},
          s n'' => \p => {
            subst (\p' => E (s n'') (element (cons x xs) p'))
              (equality-is-prop (cong s (s-inj p)) p)
              (co x (element xs (s-inj p)))
          }
        },
      }) p)
  }
}

-- Coherence laws:
-- these are almost refl, but blocked by annoying things that are compiler problems.

def 0 vec-ind-nil' :  [T : Type] -> [E : (0 n : Nat) -> Vec' T n -> Type]
    -> [ni : E 0 vec-nil']
    -> [co : ((x : T) -> [n : Nat] -> (xs : Vec' T n) -> E (s n) (vec-cons' x xs))]
    -> Equal (vec-ind' E ni co vec-nil') ni
{
  ?vec-ind-nil'
}

def 0 vec-ind-cons' :  [T : Type] -> [E : (0 n : Nat) -> Vec' T n -> Type]
    -> [ni : E 0 vec-nil']
    -> [co : ((x : T) -> [n : Nat] -> (xs : Vec' T n) -> E (s n) (vec-cons' x xs))]
    -> [! n : Nat] -> (x : T) -> (xs : Vec' T n)
    -> Equal (vec-ind' E ni co (vec-cons' x xs)) (co x xs)
{
  \x xs => ?vec-ind-cons'
}


-- Represent vectors as a refinement of lists.
repr data Vec T n as Vec' T n {
  vec-nil as vec-nil',
  vec-cons x xs as vec-cons' x (repr xs),

  case b to E {
    vec-nil => ni,
    vec-cons => co
  } as {
    vec-ind' (\n v => E n (unrepr v)) ni (\x xs => co x (unrepr xs)) (repr b)
  }
}

def 0 fin-zero-absurd : Fin 0 -> Empty {
  \i => (case i to (\n _ => Equal 0 n -> Empty) {
    fz => z-neq-s,
    fs _ => z-neq-s,
  }) refl
}

-- Indexing into vectors, which will really be indexing into lists at runtime.
def vec-index : [T : Type, n : Nat] -> Vec T n -> Fin n -> T {
  \v => case v to (\n _ => Fin n -> T) {
    vec-nil => \i => case fin-zero-absurd i {},
    vec-cons [n'] x xs => \i => (case i to (\n _ => Equal (s n') n -> T) {
      fz => \_ => x,
      fs i' => \p => {
        let p' = s-inj p;
        vec-index xs (subst (\i => Fin i) (sym p') i')
      },
    }) refl
  }
}

def safe-index : [T : Type, n : Nat] -> (l : List T) -> 0 Equal (length l) n -> (i : Fin n) -> T {
  \l p i => vec-index (unrepr (element l p)) i
}

def vec-to-list : [T : Type, n : Nat] -> Vec T n -> List T {
  \v => case v to (\n _ => List T) {
    vec-nil => nil,
    vec-cons x xs => cons x (vec-to-list xs)
  }
}

-- Zero-cost vectors to lists
repr def vec-to-list as \v => inclusion (repr v)

-- In the output we see only JavaScript arrays, no vectors.
def main : IO () {
  let v = vec-cons 1 (vec-cons 2 (vec-cons 3 vec-nil));
  let n = vec-index v 2n;
  js-console-log n
}
