
data LinPair (A B : Type) : Type {
  1 lpair : 1 A -> 1 B -> LinPair A B
}

def 1 duplicate : [T : Type] -> 1 T -> 1 T -> LinPair T T {
  \t u => lpair t u
}

def 1 swap : [T : Type] -> LinPair T T -> LinPair T T {
  \(lpair t u) => lpair u t
}

data LinList (A : Type) : Type {
  1 lnil : LinList A,
  1 lcons : 1 A -> 1 LinList A -> LinList A
}

def 1 lin-map : [A : Type] -> (1 A -> A) -> 1 LinList A -> LinList A {
  \f l => case l {
    lnil => lnil,
    lcons x xs => lcons (f x) (lin-map f xs)
  }
}

def 1 lin-length : [A : Type] -> 1 LinList A -> LinPair (LinList A) Nat {
  \l => case l {
    lnil => lpair lnil 0,
    lcons x xs => {
      let (lpair xs' n) = lin-length xs;
      lpair (lcons x xs') (s n)
    }
  }
}
