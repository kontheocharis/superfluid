def Size : Type {
  Nat
}

-- de-Brujin levels, used to index into terms
data Lvl : Size -> Type {
  lz : [n : Size] -> Lvl (s n),
  ls : [n : Size] -> Lvl n -> Lvl (s n)
}

-- Weakening for de-Brujin levels
def weaken : [n : Size] -> Lvl n -> Lvl (s n) {
  \l => case l to (\n l => Lvl (s n)) {
    lz => lz,
    ls n => ls (weaken n)
  }
}

-- The goal: make weakening the identity function.
-- This is because weakening the context by one variable
-- only adds it to the *end* of the context, and de-Brujin
-- levels only index from the beginning of the context.
-- Thus, weakening a de-Brujin level should only change the
-- data type's index, not the actual data itself. (This is as opposed to
-- de-Brujin indices, where weakening is not zero-cost.)
--
-- For a file full of "identity" weakening functions, see
-- <https://github.com/kontheocharis/superfluid-idr/blob/master/src/Core/Weakening.idr>
-- We want to provably compile these to the identity function..


-- Strategy: represent a de-Brujin level as a Nat less than some value (using
-- Subset). The less-than proof should be erased. Then we can use the congruence
-- of successor in the less-than relation to weaken a de-Brujin level, and the
-- result should be erased.

data LT : Size -> Size -> Type {
  lt-zero : [n : Nat] -> LT z (s n),
  lt-succ : [n : Nat, m : Nat] (p : LT n m) -> LT (s n) (s m)
}

def lt-next : [a : Size, b : Size] -> LT a b -> LT a (s b) {
  \p => case p to (\a b p => LT a (s b)) {
    lt-zero => lt-zero,
    lt-succ q => lt-succ (lt-next q)
  }
}

def Lvl' : Size -> Type {
  \n => Subset Nat (\m => LT m n)
}

#unfold
def lz' : [n : Size] -> Lvl' (s n) {
  element 0 lt-zero
}

#unfold
def ls' : [n : Size] -> Lvl' n -> Lvl' (s n) {
  \(element n p) => element (s n) (lt-succ p)
}

-- I am too lazy to prove these due to the lack of dependent pattern matching but they are obvious.
def lt-z-z-absurd : LT z z -> Empty {
  \p => case p {
    lt-zero => ?Fsdf,
    lt-succ q => ?fsdf
  }
}
def lt-s-z-absurd : [n : Nat] -> LT (s n) z -> Empty {
  ?lt-s-z-absurd
}
def lt-z-s-is-lt-zero : [n : Nat] -> (p : LT z (s n)) -> Equal lt-zero p {
  ?lt-z-s-is-lt-zero
}
def lt-s-s-is-lt-succ : [m : Nat, n : Nat] -> (p : LT (s m) (s n)) -> (p' : LT m n) * Equal (lt-succ p') p {
  ?lt-s-s-is-lt-succ
}

-- This induction looks terrible but it is because we don't have dependent pattern matching.
#unfold
#noaccount -- This is needed because I am matching on irrelevant arguments. It is valid because only one branch doesn't diverge.
def lvl'-ind : (E : (0 s : Size) -> Lvl' s -> Type)
  -> (lz'' : [n : Size] -> E (s n) lz')
  -> (ls'' : [n : Size] -> (l : Lvl' n) -> E (s n) (ls' l))
  -> [n : Size] -> (l : Lvl' n) -> E n l
{
  \E lz'' ls'' [n] b' => {
      let m = inclusion b';
      let 0 p = membership b';

      subst
        (\t => E n t) (sym subset-eta)
        ((case m to (\m' => (p' : LT m' n) -> E n (element m' p')) {
          z => case n to (\n' => (p' : LT z n') -> E n' (element z p')) {
            z => \p' => case lt-z-z-absurd p' {}, -- Impossible: can't have LT z z
            s n' => \p' => subst (\q => E (s n') (element z q)) (lt-z-s-is-lt-zero p') lz'',
          },
          s m' => case n to (\n' => (p' : LT (s m') n') -> E n' (element (s m') p')) {
            z => \p' => case lt-s-z-absurd p' {}, -- Impossible: can't have LT (s m') z
            s n' => \p' => {
                let (x, g) = lt-s-s-is-lt-succ p';
                subst (\q => E (s n') (element (s m') q)) g (ls'' (element m' x))
            },
          },
        }) p)
  }
}

-- Finally, represent Lvl as Lvl'
repr data Lvl n as Lvl' n {
  lz as lz',
  ls p as ls' (repr p),
  case b to E {
    lz => lze,
    ls => lse,
  } as {
    lvl'-ind (\n v => E n (unrepr v)) lze (\q => lse (unrepr q)) (repr b)
  }
}

-- And, we get free weakening! It is the identity in the output.
repr def weaken as {
  \[n] l => {
    let (element p q) = repr l;
    unrepr (element p (lt-next q))
  }
}
