data Bool : Type {
  true : Bool,
  false : Bool
}

data Ty : Type {
  alpha : Ty,
  fn : Ty -> Ty -> Ty
}

data Con : Type {
  empty : Con,
  extend : Con -> Ty -> Con
}

data Var : Con -> Ty -> Type {
  here : [c : Con] -> [t : Ty] -> Var (extend c t) t,
  there : [c : Con] -> [t : Ty] -> [t' : Ty] -> Var c t -> Var (extend c t') t
}

data Sub : Con -> Con -> Type {}

data Tm : Con -> Ty -> Type {
  var : [c : Con] -> [t : Ty] -> Var c t -> Tm c t,
  lam : [c : Con] -> [t1 : Ty] -> [t2 : Ty] -> Tm (extend c t1) t2 -> Tm c (fn t1 t2),
  app : [c : Con] -> [t1 : Ty] -> [t2 : Ty] -> Tm c (fn t1 t2) -> Tm c t1 -> Tm c t2,
  subst : [c : Con] -> [d : Con] -> [t : Ty] -> Sub c d -> Tm d t -> Tm c t
}

data Sub : Con -> Con -> Type {
  terminal : [c : Con] -> Sub c empty,
  join : [c1 : Con] -> [c2 : Con] -> [t : Ty] -> Sub c1 c2 -> Tm c1 t -> Sub c1 (extend c2 t),
  identity : [c : Con] -> Sub c c,
}

data Setoid : Type -> Type {
  setoid : (a : Type) -> (a -> a -> Type) -> Setoid a
}

def id : [c : Con] -> Tm c (fn alpha alpha) {
  lam (var here)
}

def main : Bool {
  true
}
