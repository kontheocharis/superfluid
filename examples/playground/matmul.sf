record Iso (A : Type) (B : Type) : Type {
  forward : A -> B,
  backward : B -> A,
  r-inv : forward (backward a) = a,
  l-inv : backward (forward b) = b,
}

record Index : Type {
  shapes : Nat,
  arities : Vec Nat shapes,
}

def total-size : Index -> Nat {
  ?total-size
}

data Idx : Index -> Type {
  [] : Idx (.shapes = 0, .arities = []),
  [_, .. _] : [s : Nat, i : Index] -> (a : Fin s) -> Idx i -> Idx (.shapes = 1 + i.shapes, .arities = [s, .. i.arities]),
}

def idx-iso : [i : Index] -> Iso (Idx i) (Fin (total-size i)) {(
    .forward = ?forward,
    .backward = ?backward,
    .r-inv = ?r-inv,
    .l-inv = ?l-inv,
)}

record Matrix (T : Type, i : Index) : Type {
  at : (i : Idx i) -> T
}

def fill : (n : Nat) -> (Fin n -> T) -> Vec T n {
  ?fill
}

repr record Matrix T i as Vec T (total-size i) {
  m.at as \d => index (repr m) (idx-iso.forward d),
  (.at = a) as fill (total-size i) (\f => a (idx-iso.backward f)),
}
