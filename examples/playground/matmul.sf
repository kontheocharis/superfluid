data Shape : Type {
  i : Nat -> Shape,
  cross : Shape -> Shape -> Shape,
}

data Index : Shape -> Type {
  here : [n : Nat] -> Fin n -> Index (i n),
  pair : [s1 : Shape] -> [s2 : Shape] -> Index s1 -> Index s2 -> Index (cross s1 s2),
}

data Tensor : Shape -> Type -> Type {
  mk-tensor : [h : Shape] -> [A : Type] -> (Index h -> A) -> Tensor h A,
}

def repeat : [h : Shape] -> [A : Type] -> (x : A) -> Tensor h A {
  \x => mk-tensor (\_ => x)
}

data Ring : Type -> Type {
  mk-ring : [R : Type]
    -> (zero : R)
    -> (one : R)
    -> (plus : R -> R -> R)
    -> (times : R -> R -> R)
    -> Ring R,
}

def tensor-index : [h : Shape] -> [A : Type] -> Tensor h A -> Index h -> A {
  \t idx => case t {
    mk-tensor f => f idx
  }
}

def tensor-op : [h : Shape] -> [R : Type] -> (R -> R -> R) -> Tensor h R -> Tensor h R -> Tensor h R {
  \op t1 t2 => {
    mk-tensor (\idx => op (tensor-index t1 idx) (tensor-index t2 idx))
  }
}

def tensor-mul : [h1 : Shape]
  -> [h2 : Shape]
  -> [h3 : Shape]
  -> [R : Type]
  -> Ring R
  -> Tensor (cross h1 h2) R
  -> Tensor (cross h2 h3) R
  -> Tensor (cross h1 h3) R
{
  \ring t1 t2 => case ring {
    mk-ring zero one plus times => {

    }
  }
}

