data Dec : Type -> Type {
  yes : [A : Type] -> A -> Dec A,
  no : [A : Type] -> (A -> Empty) -> Dec A
}

def add : Nat -> Nat -> Nat {
  \m n => case m {
    z => n,
    s m' => s (add m' n),
  }
}

-- def sub : Nat -> Nat -> Nat {
--   \m n => case n {
--     z => m,
--     s n' => case m {
--       z => z,
--       s m' => sub m' n',
--     }
--   }
-- }

-- def mul : Nat -> Nat -> Nat {
--   \m n => case m {
--     z => z,
--     s m' => add n (mul m' n),
--   }
-- }

-- def is-even : Nat -> Bool {
--   \n => case n {
--     z => true,
--     s n' => case n' {
--       z => false,
--       s n'' => is-even n'',
--     }
--   }
-- }

-- def pow : Nat -> Nat -> Nat {
--   \m n => case n {
--     z => s z,
--     s n' => mul m (pow m n'),
--   }
-- }

-- def and : Bool -> Bool -> Bool {
--   \a b => case a {
--     true => b,
--     false => false,
--   }
-- }

-- def or : Bool -> Bool -> Bool {
--   \a b => case a {
--     true => true,
--     false => b,
--   }
-- }

-- def not : Bool -> Bool {
--   \a => case a {
--     true => false,
--     false => true,
--   }
-- }

-- def fin-to-nat : [n : Nat] -> Fin n -> Nat {
--   \f => case f {
--     fz => z,
--     fs f' => s (fin-to-nat f'),
--   }
-- }

-- def fin-is-even : [n : Nat] -> Fin n -> Bool {
--   \x => case x {
--     fz => true,
--     fs x => case x {
--       fz => false,
--       fs y => fin-is-even y
--     }
--   }
-- }

-- def upgrade : [n : Nat] -> (i : Nat) -> Fin n -> Fin (add (s i) n) {
--   ?upgrade
-- }

-- def fin-eq : [n : Nat] -> [m : Nat] -> Fin n -> Fin m -> Bool {
--   \a b => case a {
--     fz => case b {
--       fz => true,
--       fs y => false
--     },
--     fs x => case b {
--       fz => false,
--       fs y => fin-eq x y
--     }
--   }
-- }

-- def length : [A : Type] -> List A -> Nat {
--   \xs => case xs {
--     nil => z,
--     cons _ xs' => s (length xs'),
--   }
-- }

-- def map : [A : Type] -> [B : Type] -> (A -> B) -> List A -> List B {
--   \f xs => case xs {
--     nil => nil,
--     cons x xs' => cons (f x) (map f xs')
--   }
-- }

-- def find : [A : Type] -> (A -> Bool) -> List A -> Maybe A {
--   \p xs => case xs {
--     nil => nothing,
--     cons x xs' => case p x {
--       true => just x,
--       false => find p xs'
--     }
--   }
-- }

-- def fold : [A : Type] -> [B : Type] -> (A -> B -> B) -> B -> List A -> B {
--   \f acc xs => case xs {
--     nil => acc,
--     cons x xs' => f x (fold f acc xs')
--   }
-- }

-- def index : [A : Type] -> Nat -> List A -> Maybe A {
--   \n xs => case xs {
--     nil => nothing,
--     cons x xs' => case n {
--       z => just x,
--       s n' => index n' xs'
--     }
--   }
-- }

-- def subst : [A : Type, x : A, y : A] -> (P : A -> Type) -> Equal x y -> P x -> P y {
--   \P e p => case e {
--     refl => p
--   }
-- }

-- def cong : [A : Type, B : Type, x : A, y : A] -> (f : A -> B) -> Equal x y -> Equal (f x) (f y) {
--   \f e => case e {
--     refl => refl
--   }
-- }

-- def sym : [A : Type, x : A, y : A] -> Equal x y -> Equal y x {
--   \e => case e {
--     refl => refl
--   }
-- }

-- def z-neq-s : [n : Nat] -> Equal z (s n) -> Empty {
--   \p => subst (\n => case n {
--     z => Unit,
--     s _ => Empty,
--   }) p tt
-- }

-- def co-sym : [A : Type, x : A, y : A] -> (Equal x y -> Empty) -> (Equal y x -> Empty) {
--   \m p => m (sym p)
-- }

-- -- @@Fixme : this can prove that any f : A -> B is injective!!
-- def s-inj : [n : Nat, m : Nat] -> Equal (s n) (s m) -> Equal n m {
--   \e => case e {
--     refl => refl
--   }
-- }

-- def s-co-cong : [x : Nat, y : Nat] -> (Equal x y -> Empty) -> (Equal (s x) (s y) -> Empty) {
--   \m p => m (s-inj p)
-- }

-- def nat-eq : (n : Nat, m : Nat) -> Dec (Equal n m) {
--   \n m => case n {
--     z => case m {
--       z => yes refl,
--       s m' => no z-neq-s,
--     },
--     s n' => case m {
--       z => no (co-sym z-neq-s),
--       s m' => case nat-eq n' m' {
--         yes e => yes (cong s e),
--         no f => no (s-co-cong f)
--       }
--     }
--   }
-- }

-- -- Default representations
-- repr data Bool as JS {
--   true as js-true,
--   false as js-false,

--   case b {
--     true => t,
--     false => f,
--   } as {
--     js-if (repr b) (cast t) (cast f)
--   }
-- }

-- repr def and as \a b => unrepr Bool (js-and (repr a) (repr b))
-- repr def or as \a b => unrepr Bool (js-or (repr a) (repr b))
-- repr def not as \a => unrepr Bool (js-not (repr a))


-- repr data Nat as JS {
--   z as js-zero,
--   s n as js-plus js-one (repr n),
--   case n {
--     z => b,
--     s => r,
--   } as {
--     js-if (js-eqq (repr n) js-zero)
--       (cast b)
--       (cast (r (unrepr Nat (js-minus (repr n) js-one))))
--   }
-- }

-- repr def add as \a b => unrepr Nat (js-plus (repr a) (repr b))
-- repr def mul as \a b => unrepr Nat (js-times (repr a) (repr b))
-- repr def pow as \a b => unrepr Nat (js-pow (repr a) (repr b))
-- repr def is-even as \n => unrepr Bool (js-eqq (js-mod (repr n) js-two) js-zero)

-- repr data Fin n as JS {
--   fz as js-zero,
--   fs n as js-plus js-one (repr n),
--   case n {
--     fz => b,
--     fs => r,
--   } as {
--     js-if (js-eqq (repr n) js-zero)
--       (cast b)
--       (cast (r (unrepr Fin (js-minus (repr n) js-one))))
--   }
-- }

-- repr def fin-to-nat as \n => unrepr Nat (repr n)
-- repr def fin-is-even as \n => unrepr Bool (js-eqq (js-mod (repr n) js-two) js-zero)
-- repr def fin-eq as \x y => unrepr Bool (js-eqq (repr x) (repr y))

-- repr data Maybe A as JS { -- Here we really need a bound "A represents as JS"
--   nothing as js-null,
--   just a as to-js a,

--   case m {
--     nothing => n,
--     just => j,
--   } as {
--     js-if (js-eqq (repr m) js-null)
--       (cast n)
--       (cast (j (cast m)))
--   }
-- }

-- repr data List A as JS {
--   nil as js-empty-array,
--   cons x xs as js-array-extend-l (to-js x) (repr xs),

--   case l {
--     nil => n,
--     cons => c,
--   } as {
--     let l' = repr l;
--     js-if (js-eqq (js-length l') js-zero)
--       (cast n)
--       (cast (c (cast (js-index l' js-zero)) (unrepr List (js-slice l' js-one (js-length l')))))
--   }
-- }

-- repr def index as {
--   \i l => {
--     let l' = repr l;
--     let i' = repr i;

--     unrepr Maybe (
--       js-if (js-lt i' (js-length l'))
--         (cast (js-index l' i'))
--         (cast js-null)
--     )
--   }
-- }

-- repr def length as \l => unrepr Nat (js-length (repr l))
-- repr def map as \f xs => unrepr List (js-map (cast f) (repr xs))
-- repr def fold as \f i xs => cast (js-fold (\acc x => cast (f (cast x) (cast acc))) (to-js i) (repr xs))

-- -- More definitions

-- data Char : Type {
--   char-from-num : Fin 32 -> Char,
-- }

-- data String : Type {
--   snil : String,
--   scons : Char -> String -> String,
-- }
