def Word : Type {
  Fin 65536
}

def Byte : Type {
  Fin 256
}

data ByteVec : [n : Nat] -> Fin n -> Type {
  bnil : [n : Nat] -> ByteVec (fz [n]),
  bcons : [n : Nat] -> [i : Fin n] -> Byte -> ByteVec i -> ByteVec (fs i)
}

data UdpPacket : Type {
  mk-udp-packet :
    (src-port : Word) ->
    (dst-port : Word) ->
    (len : Word) ->
    (checksum : Word) ->
    (contents : ByteVec len) ->
    UdpPacket
}


def OWN_PORT : Word {
  3096n
}

def rec max-fin : [n : Nat] -> Fin n -> Fin n -> Fin n {
  \x y => case x {
    fz => y,
    fs x' => case y {
      fz => x,
      fs y' => fs (max-fin x' y')
    }
  }
}

def handle-packet : UdpPacket -> Maybe UdpPacket {
  \p => case p {
    mk-udp-packet src-port dst-port len checksum contents => {
      -- The rule is, if the source port is even, forward the packet
      -- to the destination port, setting the source port to be our own.
      -- Otherwise, drop it.
      case fin-is-even src-port {
        true => {
          let new-p = mk-udp-packet OWN_PORT dst-port len checksum contents;
          just new-p
        },
        false => nothing
      }
    }
  }
}

def rec repeat : [n : Nat] -> (f : Fin n) -> Byte -> ByteVec f {
  \f b => case f {
    fz => bnil,
    fs f' => bcons b (repeat f' b)
  }
}

def rec io-mapM_ : [A : Type] -> (A -> IO Unit) -> List A -> IO Unit {
  \f xs => case xs {
    nil => io-return tt,
    cons x xs' => {
      let m = io-bind (f x) (\_ => io-mapM_ f xs'); -- @@FIXME dies without this let??
      m
    }
  }
}

def rec list-range : Nat -> List Nat {
  \n => case n {
    z => nil,
    s n' => cons n' (list-range n')
  }
}

def main : IO Unit {
  let packet-size : Word = 20000n;

  let contents = repeat packet-size 42n;

  let test-packet = to-bytes (mk-udp-packet
    2n
    3n
    packet-size
    5n
    contents);

  io-mapM_ (\i => {
    io-bind (debug-print i) (\_ => {
      let result = handle-packet test-packet;

      case result {
        just r => case r {
          mk-udp-packet _ _ len _ _ => debug-print len
        },
        nothing => {
          debug-print "No UDP packet!"
        }
      }
    })
  }) (list-range 200)
}


repr ByteVecRepr {
  data ByteVec n as JS {
    bnil as js-buffer-alloc (repr 0),
    bcons x xs as {
      let xs' = repr xs;
      let old-len = js-buffer-byte-length xs';
      let new-len = js-plus old-len (repr 1);
      let b = js-buffer-alloc new-len;
      let b' = js-buffer-write-uint8 (repr x) (repr 0) b;
      js-buffer-copy xs' (repr 0) old-len (repr 1) b'
    },
    case l {
      bnil => n,
      bcons => c
    } as {
      let l' = repr l;
      js-if (js-eqq (js-buffer-byte-length l') (repr 0))
        (cast n)
        (cast (c (unrepr Fin (js-index l' (repr 0))) (unrepr ByteVec (js-buffer-subarray l' (repr 1) (js-buffer-byte-length l')))))
    }
  }
}

repr UdpRepr {
  data UdpPacket as JS {
    mk-udp-packet src-port dst-port len checksum contents as {
      let len' = repr len;
      let total-len = js-plus len' (repr 8);
      let b = js-buffer-alloc total-len;
      let b' = js-buffer-write-uint16-be (repr src-port) (repr 0) b;
      let b'' = js-buffer-write-uint16-be (repr dst-port) (repr 2) b';
      let b''' = js-buffer-write-uint16-be len' (repr 4) b'';
      let b'''' = js-buffer-write-uint16-be (repr checksum) (repr 6) b''';
      let b''''' = js-buffer-copy (repr contents) (repr 0) len' (repr 8) b'''';
      b'''''
    },
    case p {
      mk-udp-packet => mk,
    } as {
      let p' = repr p;
      let len = js-buffer-read-uint16-be (repr 4) p';
      cast (mk
        (unrepr Fin (js-buffer-read-uint16-be (repr 0) p'))
        (unrepr Fin (js-buffer-read-uint16-be (repr 2) p'))
        (unrepr Fin len)
        (unrepr Fin (js-buffer-read-uint16-be (repr 6) p'))
        (unrepr ByteVec (js-buffer-subarray (repr 8) (js-plus (repr 8) len) p')))
    }
  }
}
