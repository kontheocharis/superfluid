data Lam : Type {
  var : Nat -> Lam,
  app : Lam -> Lam -> Lam,
  lam : Lam -> Lam,
}

data Lazy : Type -> Type {
  lazy : [A : Type] -> (Unit -> A) -> Lazy A
}

data List : Type -> Type {
  nil : [A : Type] -> List A,
  cons : [A : Type] -> A -> List A -> List A
}

data Bits : Nat -> Type {
  empty : Bits z,
  is-on : Bits n -> Bool -> Bits (s n),
}

data Integer : Type {
  neg : Nat -> Integer,
  pos : Nat -> Integer,
  zero-is-zero : neg 0 = pos 0
}

data Rational : Type {
  rational : Integer -> Integer -> Rational
  divisors : [a : Integer, b : Integer, c : Integer] -> rational a b = rational (mul a c) (mul b c)
}

data Float64OrNaN : Type {
  float64 : Float64,
  nan : Float64
}

data Float64 : Type {
  float64 : (sign : Bool, exp : Fin (pow 2 11), mantissa : Fin (pow 2 53)) -> Float64
}

def concat-bits : [m, n : Nat] -> Bits n -> Bits m -> Bits (add m n) {
  \m n b1 b2 => case b2 {
    empty => b1,
    is-on b2' b => is-on (concat-bits m n b1 b2') b
  }
}

repr data Float64 as Bits 64 {
  float64 sign exp mantissa as concat-bits (repr sign) (concat-bits (repr exp) (repr mantissa))
  case l {
    float64 => b,
  } as {
    b (unrepr Bool (slice l 0 1)) (unrepr Fin (slice l 1 12)) (unrepr Fin (slice l 12 64))
  }
}

def float64-add : Float64 -> Float64 -> Float64 {
  \n m => unrepr Float64 (intrinsic-f64-add (repr n) (repr m))
}

def force : [A : Type] -> Lazy A -> A {
  \l => case l {
    mk-lazy _ f => f unit
  }
}

def rec fib : Nat -> Nat {
  \n => case n {
    z => z,
    s n' => case n' {
      z => s z,
      s n'' => add (fib n') (fib n'')
    }
  }
}

def rec nat-eq : Nat -> Nat -> Bool {
  \n m => case n {
    z => case m {
      z => true,
      s m' => false
    },
    s n' => case m {
      z => false,
      s m' => nat-eq n' m'
    }
  }
}

repr NatEqAsEq {
  def nat-eq as \n m => js-eqq n m
}

def rec subst : Lam -> Nat -> Lam -> Lam {
  \e n t => case e {
    var x => case nat-eq n x {
      true => t,
      false => var x
    },
    app e1 e2 => app (subst e1 n t) (subst e2 n t),
    lam e' => lam (subst e' (s n) t)
  }
}

def rec evaluate : Lam -> Lam {
  \e => case e {
    var x => var x,
    app e1 e2 => {
      let e1' = evaluate e1;
      case e1' {
        lam e' => evaluate (subst e' z e2),
        app e11' e12' => app (app e11' e12') (evaluate e2),
        var x => app (var x) (evaluate e2)
      }
    },
    lam e' => lam (evaluate e')
  }
}

data Val : Type {
  vlam : List Val -> Lam -> Val,
  vapp : Val -> Val -> Val,
  vvar : Nat -> Val,
}

def rec evaluate-nbe : List Val -> Lam -> Val {
  \ctx e => case e {
    var x => {
      let idx = index x ctx;
      case idx {
        just t => t,
        nothing => vvar x
      }
    },
    app e1 e2 => {
      let e1' = evaluate-nbe ctx e1;
      case e1' {
        vlam ctx e' => evaluate-nbe (cons (evaluate-nbe ctx e2) ctx) e',
        vapp e11' e12' => vapp (vapp e11' e12') (evaluate-nbe ctx e2),
        vvar x => vapp (vvar x) (evaluate-nbe ctx e2)
      }
    },
    lam e' => vlam ctx e'
  }
}

def rec reify : Val -> Lam {
  \v => case v {
    vlam ctx e => lam e,
    vapp e1 e2 => app (reify e1) (reify e2),
    vvar x => var x
  }
}

def identity : Lam {
  lam (var z)
}

def two : Nat {
  s (s z)
}

#unfold
def ten : Nat {
  s (s (s (s (s (s (s (s (s (s z)))))))))
}

def twenty : Nat {
  mul ten two
}

def test-list : List Nat {
  cons ten (cons twenty (cons ten (cons twenty nil)))
}

def main : IO Unit {
  let lam-term = app (app (app (lam (app (var z) (lam (lam (var (s z)))))) (lam (var (s z)))) (var z)) (var (s (s z)));
  let evaluate-alt = \t => reify (evaluate-nbe nil t);
  io-bind
    (debug-print (evaluate lam-term))
    (\_ => debug-print (evaluate-alt lam-term))
}
