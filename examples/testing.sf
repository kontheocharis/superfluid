data Ty : Type {
  alpha : Ty,
  nat : Ty,
  fn : Ty -> Ty -> Ty
}

data Ctx : Type {
  empty : Ctx,
  with : Ctx -> Ty -> Ctx
}

-- @@FIXME
repr CtxAsList {
  data Ctx as List Ty {
    empty as nil,
    with c t as cons t c,

    case c {
      empty => b,
      with => r
    } as case c {
      nil => b,
      cons x xs => r xs x
    }
  }
}

def rec fib : Nat -> Nat {
  \n => case n {
    z => z,
    s n' => case n' {
      z => s z,
      s n'' => add (fib n') (fib n'')
    }
  }
}

def two : Nat {
  s (s z)
}

def ten : Nat {
  s (s (s (s (s (s (s (s (s (s z)))))))))
}

def twenty : Nat {
  mul ten two
}

def test-list : List Nat {
  cons ten (cons twenty (cons ten (cons twenty nil)))
}

def main : IO Unit {
  debug-print (map (\x => pow x two) test-list)
}
