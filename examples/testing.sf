data Lam : Type {
  var : Nat -> Lam,
  app : Lam -> Lam -> Lam,
  lam : Lam -> Lam,
}

def rec fib : Nat -> Nat {
  \n => case n {
    z => z,
    s n' => case n' {
      z => s z,
      s n'' => add (fib n') (fib n'')
    }
  }
}

def identity : Lam {
  lam (var z)
}

def two : Nat {
  s (s z)
}

#unfold
def ten : Nat {
  s (s (s (s (s (s (s (s (s (s z)))))))))
}

def twenty : Nat {
  mul ten two
}

def test-list : List Nat {
  cons ten (cons twenty (cons ten (cons twenty nil)))
}

def main : IO Unit {
  debug-print (map (\x => pow x two) test-list)
}
